// Code generated by https://github.com/moov-io/xsd2go; DO NOT EDIT.
// Models for {{ .TargetNamespace }}
package {{ .GoPackageName }}

import (
    {{- range .GoImportsNeeded }}
        "{{ . }}"
    {{- end }}

    "github.com/moov-io/rtp20022/pkg/rtp"
)

{{ if .ExportableElements -}}
    // XSD Elements
{{ end -}}
{{ range .ExportableElements }}
    type {{ .GoName }} struct {
        XMLName xml.Name
        {{- if .ContainsText }}
            Value {{ .GoTypeName }} `xml:",chardata"`
        {{- end }}
        {{- range .Attributes }}
            {{ .GoName }} {{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},{{ .Modifiers }}"`
        {{- end }}
        {{- range .Elements }}
            {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .Schema.TargetNamespace }} {{ .XmlName }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
        {{- end }}
    }

    {{ $elemLen := len .Elements }}{{ if gt $elemLen 0 }}
        // MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
        func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
            e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
            {{- range .Elements }}
                e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ .Schema.NsPrefix }}:{{ .XmlName }}"}})
            {{- end }}
            e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
            return nil
        }
    {{ end }}
{{ end }}

{{ if .ExportableComplexTypes -}}
    // XSD ComplexType declarations
{{ end }}
{{ range .ExportableComplexTypes }}
    type {{ .GoName }} struct {
        {{- if .ContainsText }}
            Value {{ .GoTypeName }} `xml:",chardata"`
        {{- end }}
        {{- range .Attributes }}
            {{ .GoName }} {{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},{{ .Modifiers }}"`
        {{- end }}
        {{- range .Elements }}
            {{- if .IncludeElementTemplate }}
                {{ InclElem .IncludeTemplateName . }}
            {{- else }}
                {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .Schema.TargetNamespace }} {{ .XmlName }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
            {{- end }}
        {{- end }}
        {{- if .Sequence }}
            {{- range .Sequence.Any }}
                Item string `xml:",any"`
            {{- end }}
        {{- end }}
    }

    {{ $elemLen := len .Elements }}{{ if gt $elemLen 0 }}
        // MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
        func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
            e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
            {{- range .Elements }}
                e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ .Schema.NsPrefix }}:{{ .XmlName }}"}})
            {{- end }}
            e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
            return nil
        }
    {{ end }}
{{ end }}

{{ if .ExportableSimpleTypes -}}
    // XSD SimpleType declarations
{{ end }}
{{ range .ExportableSimpleTypes }}
    {{ if .IncludeTypeTemplate }}
        {{ InclType .IncludeTemplateName . }}
    {{ else }}
        type {{ .GoName }} {{ .GoTypeName }}
    {{ end }}

    {{- $simpleType := . -}}
    {{- range .Enums }}
        const {{ $simpleType.GoName -}} {{- .GoName }} {{ $simpleType.GoName }} = "{{ .XmlName }}"
    {{- end }}
{{ end }}
