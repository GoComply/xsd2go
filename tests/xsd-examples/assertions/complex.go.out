// Code generated by https://github.com/moov-io/xsd2go; DO NOT EDIT.
// Models for https://simple.example.com/
package complex

import (
	"encoding/xml"
)

// XSD Elements

type Myelement struct {
	XMLName    xml.Name
	Id         int64  `xml:"https://simple.example.com/ id"`
	ExternalId *int64 `xml:"https://simple.example.com/ external_id,omitempty"`
	Id1        *int   `xml:"https://simple.example.com/ id_1,omitempty"`
	Id21       *int   `xml:"https://simple.example.com/ id_21,omitempty"`
	Id22       *int   `xml:"https://simple.example.com/ id_22,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Myelement) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "complex:id"}})
	e.EncodeElement(v.ExternalId, xml.StartElement{Name: xml.Name{Local: "complex:external_id"}})
	e.EncodeElement(v.Id1, xml.StartElement{Name: xml.Name{Local: "complex:id_1"}})
	e.EncodeElement(v.Id21, xml.StartElement{Name: xml.Name{Local: "complex:id_21"}})
	e.EncodeElement(v.Id22, xml.StartElement{Name: xml.Name{Local: "complex:id_22"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD ComplexType declarations

type MyElementType struct {
	Id         int64  `xml:"https://simple.example.com/ id"`
	ExternalId *int64 `xml:"https://simple.example.com/ external_id,omitempty"`
	Id1        *int   `xml:"https://simple.example.com/ id_1,omitempty"`
	Id21       *int   `xml:"https://simple.example.com/ id_21,omitempty"`
	Id22       *int   `xml:"https://simple.example.com/ id_22,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v MyElementType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Id, xml.StartElement{Name: xml.Name{Local: "complex:id"}})
	e.EncodeElement(v.ExternalId, xml.StartElement{Name: xml.Name{Local: "complex:external_id"}})
	e.EncodeElement(v.Id1, xml.StartElement{Name: xml.Name{Local: "complex:id_1"}})
	e.EncodeElement(v.Id21, xml.StartElement{Name: xml.Name{Local: "complex:id_21"}})
	e.EncodeElement(v.Id22, xml.StartElement{Name: xml.Name{Local: "complex:id_22"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}
