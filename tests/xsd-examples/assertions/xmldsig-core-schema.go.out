// Code generated by https://github.com/moov-io/xsd2go; DO NOT EDIT.
// Models for http://www.w3.org/2000/09/xmldsig#
package xmldsig_core_schema

import (
	"encoding/xml"
)

// XSD Elements

type Signature struct {
	XMLName        xml.Name
	Id             string             `xml:"Id,attr,omitempty"`
	SignedInfo     SignedInfoType     `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
	SignatureValue SignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
	KeyInfo        *KeyInfoType       `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo,omitempty"`
	Object         []*ObjectType      `xml:"http://www.w3.org/2000/09/xmldsig# Object,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Signature) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SignedInfo, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignedInfo"}})
	e.EncodeElement(v.SignatureValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignatureValue"}})
	e.EncodeElement(v.KeyInfo, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:KeyInfo"}})
	e.EncodeElement(v.Object, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Object"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SignatureValue struct {
	XMLName xml.Name
	Value   SignatureValueType `xml:",chardata"`
	Id      string             `xml:"Id,attr,omitempty"`
}

type SignedInfo struct {
	XMLName                xml.Name
	Id                     string                     `xml:"Id,attr,omitempty"`
	CanonicalizationMethod CanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
	SignatureMethod        SignatureMethodType        `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
	Reference              []ReferenceType            `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignedInfo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CanonicalizationMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:CanonicalizationMethod"}})
	e.EncodeElement(v.SignatureMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignatureMethod"}})
	e.EncodeElement(v.Reference, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Reference"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CanonicalizationMethod struct {
	XMLName   xml.Name
	Algorithm string `xml:"Algorithm,attr"`
}

type SignatureMethod struct {
	XMLName          xml.Name
	Algorithm        string                `xml:"Algorithm,attr"`
	HMACOutputLength *HMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignatureMethod) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.HMACOutputLength, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:HMACOutputLength"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Reference struct {
	XMLName      xml.Name
	Id           string           `xml:"Id,attr,omitempty"`
	URI          string           `xml:"URI,attr,omitempty"`
	Type         string           `xml:"Type,attr,omitempty"`
	Transforms   *TransformsType  `xml:"http://www.w3.org/2000/09/xmldsig# Transforms,omitempty"`
	DigestMethod DigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
	DigestValue  DigestValueType  `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Reference) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Transforms, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Transforms"}})
	e.EncodeElement(v.DigestMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:DigestMethod"}})
	e.EncodeElement(v.DigestValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:DigestValue"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Transforms struct {
	XMLName   xml.Name
	Transform []TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Transforms) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Transform, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Transform"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Transform struct {
	XMLName   xml.Name
	Algorithm string    `xml:"Algorithm,attr"`
	XPath     []*string `xml:"http://www.w3.org/2000/09/xmldsig# XPath,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Transform) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.XPath, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:XPath"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DigestMethod struct {
	XMLName   xml.Name
	Algorithm string `xml:"Algorithm,attr"`
}

type DigestValue struct {
	XMLName xml.Name
	Value   DigestValueType `xml:",chardata"`
}

type KeyInfo struct {
	XMLName         xml.Name
	Id              string                 `xml:"Id,attr,omitempty"`
	KeyName         []*string              `xml:"http://www.w3.org/2000/09/xmldsig# KeyName,omitempty"`
	KeyValue        []*KeyValueType        `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue,omitempty"`
	RetrievalMethod []*RetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod,omitempty"`
	X509Data        []*X509DataType        `xml:"http://www.w3.org/2000/09/xmldsig# X509Data,omitempty"`
	PGPData         []*PGPDataType         `xml:"http://www.w3.org/2000/09/xmldsig# PGPData,omitempty"`
	SPKIData        []*SPKIDataType        `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData,omitempty"`
	MgmtData        []*string              `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v KeyInfo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.KeyName, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:KeyName"}})
	e.EncodeElement(v.KeyValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:KeyValue"}})
	e.EncodeElement(v.RetrievalMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:RetrievalMethod"}})
	e.EncodeElement(v.X509Data, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509Data"}})
	e.EncodeElement(v.PGPData, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:PGPData"}})
	e.EncodeElement(v.SPKIData, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SPKIData"}})
	e.EncodeElement(v.MgmtData, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:MgmtData"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type KeyName struct {
	XMLName xml.Name
	Value   string `xml:",chardata"`
}

type MgmtData struct {
	XMLName xml.Name
	Value   string `xml:",chardata"`
}

type KeyValue struct {
	XMLName     xml.Name
	DSAKeyValue *DSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue,omitempty"`
	RSAKeyValue *RSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v KeyValue) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DSAKeyValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:DSAKeyValue"}})
	e.EncodeElement(v.RSAKeyValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:RSAKeyValue"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RetrievalMethod struct {
	XMLName    xml.Name
	URI        string          `xml:"URI,attr"`
	Type       string          `xml:"Type,attr,omitempty"`
	Transforms *TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RetrievalMethod) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Transforms, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Transforms"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type X509Data struct {
	XMLName          xml.Name
	X509IssuerSerial *X509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial,omitempty"`
	X509SKI          *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI,omitempty"`
	X509SubjectName  *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName,omitempty"`
	X509Certificate  *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate,omitempty"`
	X509CRL          *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v X509Data) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.X509IssuerSerial, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509IssuerSerial"}})
	e.EncodeElement(v.X509SKI, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509SKI"}})
	e.EncodeElement(v.X509SubjectName, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509SubjectName"}})
	e.EncodeElement(v.X509Certificate, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509Certificate"}})
	e.EncodeElement(v.X509CRL, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509CRL"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PGPData struct {
	XMLName      xml.Name
	PGPKeyID     *string `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID,omitempty"`
	PGPKeyPacket *string `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PGPData) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PGPKeyID, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:PGPKeyID"}})
	e.EncodeElement(v.PGPKeyPacket, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:PGPKeyPacket"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SPKIData struct {
	XMLName  xml.Name
	SPKISexp string `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SPKIData) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SPKISexp, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SPKISexp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type Object struct {
	XMLName  xml.Name
	Id       string `xml:"Id,attr,omitempty"`
	MimeType string `xml:"MimeType,attr,omitempty"`
	Encoding string `xml:"Encoding,attr,omitempty"`
}

type Manifest struct {
	XMLName   xml.Name
	Id        string          `xml:"Id,attr,omitempty"`
	Reference []ReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v Manifest) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Reference, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Reference"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SignatureProperties struct {
	XMLName           xml.Name
	Id                string                  `xml:"Id,attr,omitempty"`
	SignatureProperty []SignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignatureProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SignatureProperty, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignatureProperty"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SignatureProperty struct {
	XMLName xml.Name
	Target  string `xml:"Target,attr"`
	Id      string `xml:"Id,attr,omitempty"`
}

type DSAKeyValue struct {
	XMLName xml.Name
	G       *CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G,omitempty"`
	Y       CryptoBinary  `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
	J       *CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DSAKeyValue) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.G, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:G"}})
	e.EncodeElement(v.Y, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Y"}})
	e.EncodeElement(v.J, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:J"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RSAKeyValue struct {
	XMLName  xml.Name
	Modulus  CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
	Exponent CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RSAKeyValue) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Modulus, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Modulus"}})
	e.EncodeElement(v.Exponent, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Exponent"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD ComplexType declarations

type SignatureType struct {
	Id             string             `xml:"Id,attr,omitempty"`
	SignedInfo     SignedInfoType     `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
	SignatureValue SignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
	KeyInfo        *KeyInfoType       `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo,omitempty"`
	Object         []*ObjectType      `xml:"http://www.w3.org/2000/09/xmldsig# Object,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignatureType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SignedInfo, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignedInfo"}})
	e.EncodeElement(v.SignatureValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignatureValue"}})
	e.EncodeElement(v.KeyInfo, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:KeyInfo"}})
	e.EncodeElement(v.Object, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Object"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SignatureValueType struct {
	Value string `xml:",chardata"`
	Id    string `xml:"Id,attr,omitempty"`
}

type SignedInfoType struct {
	Id                     string                     `xml:"Id,attr,omitempty"`
	CanonicalizationMethod CanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
	SignatureMethod        SignatureMethodType        `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
	Reference              []ReferenceType            `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignedInfoType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.CanonicalizationMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:CanonicalizationMethod"}})
	e.EncodeElement(v.SignatureMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignatureMethod"}})
	e.EncodeElement(v.Reference, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Reference"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type CanonicalizationMethodType struct {
	Algorithm string `xml:"Algorithm,attr"`
	Item      string `xml:",any"`
}

type SignatureMethodType struct {
	Algorithm        string                `xml:"Algorithm,attr"`
	HMACOutputLength *HMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength,omitempty"`
	Item             string                `xml:",any"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignatureMethodType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.HMACOutputLength, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:HMACOutputLength"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ReferenceType struct {
	Id           string           `xml:"Id,attr,omitempty"`
	URI          string           `xml:"URI,attr,omitempty"`
	Type         string           `xml:"Type,attr,omitempty"`
	Transforms   *TransformsType  `xml:"http://www.w3.org/2000/09/xmldsig# Transforms,omitempty"`
	DigestMethod DigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
	DigestValue  DigestValueType  `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Transforms, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Transforms"}})
	e.EncodeElement(v.DigestMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:DigestMethod"}})
	e.EncodeElement(v.DigestValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:DigestValue"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TransformsType struct {
	Transform []TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TransformsType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Transform, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Transform"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type TransformType struct {
	Algorithm string    `xml:"Algorithm,attr"`
	XPath     []*string `xml:"http://www.w3.org/2000/09/xmldsig# XPath,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v TransformType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.XPath, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:XPath"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type DigestMethodType struct {
	Algorithm string `xml:"Algorithm,attr"`
	Item      string `xml:",any"`
}

type KeyInfoType struct {
	Id              string                 `xml:"Id,attr,omitempty"`
	KeyName         []*string              `xml:"http://www.w3.org/2000/09/xmldsig# KeyName,omitempty"`
	KeyValue        []*KeyValueType        `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue,omitempty"`
	RetrievalMethod []*RetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod,omitempty"`
	X509Data        []*X509DataType        `xml:"http://www.w3.org/2000/09/xmldsig# X509Data,omitempty"`
	PGPData         []*PGPDataType         `xml:"http://www.w3.org/2000/09/xmldsig# PGPData,omitempty"`
	SPKIData        []*SPKIDataType        `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData,omitempty"`
	MgmtData        []*string              `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v KeyInfoType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.KeyName, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:KeyName"}})
	e.EncodeElement(v.KeyValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:KeyValue"}})
	e.EncodeElement(v.RetrievalMethod, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:RetrievalMethod"}})
	e.EncodeElement(v.X509Data, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509Data"}})
	e.EncodeElement(v.PGPData, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:PGPData"}})
	e.EncodeElement(v.SPKIData, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SPKIData"}})
	e.EncodeElement(v.MgmtData, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:MgmtData"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type KeyValueType struct {
	DSAKeyValue *DSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue,omitempty"`
	RSAKeyValue *RSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v KeyValueType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.DSAKeyValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:DSAKeyValue"}})
	e.EncodeElement(v.RSAKeyValue, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:RSAKeyValue"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RetrievalMethodType struct {
	URI        string          `xml:"URI,attr"`
	Type       string          `xml:"Type,attr,omitempty"`
	Transforms *TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RetrievalMethodType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Transforms, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Transforms"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type X509DataType struct {
	X509IssuerSerial *X509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial,omitempty"`
	X509SKI          *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI,omitempty"`
	X509SubjectName  *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName,omitempty"`
	X509Certificate  *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate,omitempty"`
	X509CRL          *string               `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v X509DataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.X509IssuerSerial, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509IssuerSerial"}})
	e.EncodeElement(v.X509SKI, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509SKI"}})
	e.EncodeElement(v.X509SubjectName, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509SubjectName"}})
	e.EncodeElement(v.X509Certificate, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509Certificate"}})
	e.EncodeElement(v.X509CRL, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509CRL"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type X509IssuerSerialType struct {
	X509IssuerName   string `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
	X509SerialNumber int64  `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v X509IssuerSerialType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.X509IssuerName, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509IssuerName"}})
	e.EncodeElement(v.X509SerialNumber, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:X509SerialNumber"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type PGPDataType struct {
	PGPKeyID     *string `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID,omitempty"`
	PGPKeyPacket *string `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v PGPDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.PGPKeyID, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:PGPKeyID"}})
	e.EncodeElement(v.PGPKeyPacket, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:PGPKeyPacket"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SPKIDataType struct {
	SPKISexp string `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
	Item     string `xml:",any"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SPKIDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SPKISexp, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SPKISexp"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type ObjectType struct {
	Id       string `xml:"Id,attr,omitempty"`
	MimeType string `xml:"MimeType,attr,omitempty"`
	Encoding string `xml:"Encoding,attr,omitempty"`
	Item     string `xml:",any"`
}

type ManifestType struct {
	Id        string          `xml:"Id,attr,omitempty"`
	Reference []ReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v ManifestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Reference, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Reference"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SignaturePropertiesType struct {
	Id                string                  `xml:"Id,attr,omitempty"`
	SignatureProperty []SignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v SignaturePropertiesType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.SignatureProperty, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:SignatureProperty"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type SignaturePropertyType struct {
	Target string `xml:"Target,attr"`
	Id     string `xml:"Id,attr,omitempty"`
}

type DSAKeyValueType struct {
	G *CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G,omitempty"`
	Y CryptoBinary  `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
	J *CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J,omitempty"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v DSAKeyValueType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.G, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:G"}})
	e.EncodeElement(v.Y, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Y"}})
	e.EncodeElement(v.J, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:J"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

type RSAKeyValueType struct {
	Modulus  CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
	Exponent CryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

// MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
func (v RSAKeyValueType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
	e.EncodeElement(v.Modulus, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Modulus"}})
	e.EncodeElement(v.Exponent, xml.StartElement{Name: xml.Name{Local: "xmldsig-core-schema:Exponent"}})
	e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
	return nil
}

// XSD SimpleType declarations

type CryptoBinary string

type DigestValueType string

type HMACOutputLengthType int64
